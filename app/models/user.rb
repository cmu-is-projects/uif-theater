class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :token_authenticatable, :encryptable, :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable

  # Setup accessible (or protected) attributes for your model
  attr_accessible :email, :password, :password_confirmation, :remember_me, :first_name, :last_name, :phone, :organization_id, :role, :status, :reason

  # End of autogenerated code for user
  # ----------------------------------
  
  
  # Authorization code for CanCan gem
  ROLES = [['Administrator', :admin],['Coordinator', :coordinator],['Partner', :partner]]
  
  def role?(authorized_role)
    return false if role.nil?
    role.to_sym == authorized_role
  end
  
  # Relationships
  belongs_to :organization
  has_many :notes, :as => :notable, :dependent => :destroy
  
  # Callbacks
  before_save :reformat_phone
  
  # List of statuses
  STATUS_LIST = [['Active', 1], ['Pending', 0], ['Inactive', -1]]
  
  # Validations
  validates_presence_of :first_name, :last_name
  validates_numericality_of :organization_id, :allow_blank => true, :only_integer => true, :greater_than => 0
  # phone can have dashes, spaces, dots and parens, but must be 10 digits
  validates_format_of :phone, :with => /^(\d{10}|\(?\d{3}\)?[-. ]\d{3}[-.]\d{4})$/, :allow_blank => true, :message => "should be 10 digits (area code needed) and delimited with dashes only"
  validates_inclusion_of :status, :in => [1, 0, -1], :message => "is not recognized by the system"
  validates_inclusion_of :role, :in => %w[admin coordinator partner], :message => "is not recognized by the system"
  
  # Scopes
  scope :alphabetical, order('last_name, first_name')
  scope :active, where('status = ?', 1)
  scope :pending, where('status = ?', 0)
  scope :inactive, where('status = ?', -1)
  scope :for_organization, lambda {|organization_id| where("organization_id = ?", organization_id) }
  
  
  # Other methods
  def name
    "#{first_name} #{last_name}"
  end
  
  def formal_name
    "#{last_name}, #{first_name}"
  end
  
  def current_status
    return "Active" if status == 1
    return "Pending" if status.zero?
    "Inactive"
  end
  
  def is_admin?
    role == "admin"
  end
  
  def is_coordinator?
    role == "coordinator"
  end
  
  def is_partner?
    role == "partner"
  end
  
  # Callback code
  private
  # We need to strip non-digits before saving to db
  def reformat_phone
    phone = self.phone.to_s  # change to string in case input as all numbers 
    phone.gsub!(/[^0-9]/,"") # strip all non-digits
    self.phone = phone       # reset self.phone to new string
  end
end
